
yl() {
	yq -C "$@"|less -R
}

jl() {
	jq -C "$@"|less -R
}

{{- if eq .chezmoi.hostname "work" }}

find_yesterday() {
	local days=1 file= i=0 max=365

	while i=$((i+1)); [ $i -le $max ] ; do
		printf '.' >&2
		file=$(date -d "$days days ago" -I) 
		ls ../$file >/dev/null 2>&1 && break
		days=$((days+1))
	done

	[ $i -ge $max ] && {
		echo cannot find yesterday >&2
		return 1
	}

	echo $file
}

work() {
	local work_dir="$HOME/wrk/$(date -I)"

	pushd $work_dir 2>/dev/null || {
		echo not found. creating. >&2
		mkdir $work_dir || return 1
		pushd $work_dir

		printf "find yesterday." >&2
		yesterday=$(find_yesterday) && {
			printf "found.\n"
			ln "../$yesterday" ./y -s
		} || {
			printf "missed.\n"
		}
	}
}

mlf() {
  f=$(find ~/lab/ -type d -name "*$@*" )
  [ $(echo "$f"|wc -l) -gt 1 ] && {
    select f in $f;
    do
      pushd $f
      break
    done
    return
  } || [ "$f" != "" ] && pushd $f || echo "Nothing found."
}

mlff() {
  f=$(find ~/lab/ -type d -name "*$@*" )
  [ $(echo "$f"|wc -l) -gt 1 ] && {
    pushd $(printf "$f" | fzf)
    return
  } || [ "$f" != "" ] && pushd $f || echo "Nothing found."
}

lab() {
  cd ~/lab
}

mlab() {
  cd ~/lab/ndrde/mdr
}

playground() {
  cd ~/lab/playground
}

{{- end }}

gitapiitoken() {
	export GITLAB_HOST=gitlab.ida-dev.de
        export GITLAB_USER="operations-mcs"
        export GITLAB_TOKEN=$(secret-tool lookup service gitapi user operations-mcs)
        export GITLAB_API_TOKEN=$GITLAB_TOKEN
        echo set GITLAB_USER and GITLAB_TOKEN/GITLAB_API_TOKEN accordingly
}

gitapitoken() {
	export GITLAB_HOST=gitlab.com
        export GITLAB_USER="karl.liebich_mcs-team"
        export GITLAB_TOKEN=$(secret-tool lookup service gitapi user karl.liebich_mcs-team)
        export GITLAB_API_TOKEN=$GITLAB_TOKEN
        echo set GITLAB_USER and GITLAB_TOKEN/GITLAB_API_TOKEN accordingly
}

# GitLab REST api
gapi() {
        # gitapitoken >/dev/null
        local path
        path=$1
        shift
        curl -s -H "Private-Token: $GITLAB_TOKEN" https://$GITLAB_HOST/api/v4$path "$@"
}

# GitLab GraphQL api
glapi() {
    [ "${SHELL##*/}" != "bash" ] && {
        echo "bash only — but shell is $SHELL"
        return 1
    }

    [ -z "$@" ] && {
        echo "usage: ${FUNCNAME[0]##*/} [query]"        # See bash manual
        return 1
    }

    (
        set -e # in a subshell

        [ -z "$GITLAB_TOKEN" ] && {
            read -s -p 'Please provide GitLab Token or set $GITLAB_TOKEN ' GITLAB_TOKEN
        }

        local query
        query="$(echo $1|sed 's.".\\".g')"
        shift

        printf 'Query: \n %s' "$query" >&2

        curl -s https://gitlab.com/api/graphql \
            -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $GITLAB_TOKEN" \
            -d '{"query": "'"$query"'"}' \
            "$@"
    )
}

terraform-gitlab-init() {
    [ $# -lt 2 ] && { 
	    echo "usage: terraform-gitlab-init <project_id> <state_name> [Terraform options]"
    } || {
	    [ -z "$GITLAB_USER" ] && read -p "Input GitLab User " GITLAB_USER
	    [ -z "$GITLAB_TOKEN" ] && read -s -p "Input GitLab Token " GITLAB_TOKEN
	    local host='gitlab.ida-dev.de'
	    local project_id="${1}"
	    local state_name="${2}"
	    echo $state_name
	    shift 2
	    terraform init \
		-backend-config="address=https://${host}/api/v4/projects/${project_id}/terraform/state/${state_name}" \
		-backend-config="lock_address=https://${host}/api/v4/projects/${project_id}/terraform/state/${state_name}/lock" \
		-backend-config="unlock_address=https://${host}/api/v4/projects/${project_id}/terraform/state/${state_name}/lock" \
		-backend-config="username=${GITLAB_USER}" \
		-backend-config="password=${GITLAB_TOKEN}" \
		-backend-config="lock_method=POST" \
		-backend-config="unlock_method=DELETE" \
		-backend-config="retry_wait_min=5" \
		"$@"
	    }
}

gitlab-set-host () {
	[ -z "$GITLAB_HOST" ] && {
		select GITLAB_HOST in gitlab.com gitlab.ida-dev.de
		do
			export GITLAB_HOST
			break
		done
	}
}

gitlab-terraform-init() {
	gitlab-set-host
	
	[ $# -lt 2 ] && { 
		echo "usage: terraform-gitlab-init <project_id> <state_name> [Terraform options]"
	} || {
		[ -z "$GITLAB_USER" ] && read -p "Input GitLab User " GITLAB_USER
		[ -z "$GITLAB_TOKEN" ] && read -s -p "Input GitLab Token " GITLAB_TOKEN

		local host=${GITLAB_HOST:-gitlab.com}
		local project_id="${1}"
		local state_name="${2}"

		shift 2

		terraform init \
			-backend-config="address=https://${host}/api/v4/projects/${project_id}/terraform/state/${state_name}" \
			-backend-config="lock_address=https://${host}/api/v4/projects/${project_id}/terraform/state/${state_name}/lock" \
			-backend-config="unlock_address=https://${host}/api/v4/projects/${project_id}/terraform/state/${state_name}/lock" \
			-backend-config="username=${GITLAB_USER}" \
			-backend-config="password=${GITLAB_TOKEN}" \
			-backend-config="lock_method=POST" \
			-backend-config="unlock_method=DELETE" \
			-backend-config="retry_wait_min=5" \
			"$@"
	}
}

mr() {
	[ -z "$GITLAB_TOKEN" ] && gitapitoken >/dev/null

	current="$(git branch --show-current)" || { echo could not get current branch; return; }
	title="$(git show -s --format='%s')" || { echo could not get current title; return; }
	description="$(git show -s --format='%b')" || { echo could not get current body; return; }

	. .project_id && echo .project_id has been sourced || echo no .project_id found

	[ -z "$PROJECT_ID" ] && {
		read -p "project id? " PROJECT_ID
		echo "PROJECT_ID=$PROJECT_ID" >> .project_id
		echo added project id to .project_id
	}

	url="https://$GITLAB_HOST/api/v4/projects/$PROJECT_ID/merge_requests"

	printf '\nselect target\n\n'

	select target in $(git branch|awk '{if ($1 == "*"){ print $2 } else { print $1} }')
	do 
		tmp=$(mktemp)
		printf "%s\n\n%s" "$title" "$description" > $tmp
		vim $tmp
		title="$(head -n1 $tmp)"
		description="$(tail -n+3 $tmp)"
		rm "$tmp"

		request="{\"source_branch\": \"$current\", \"target_branch\": \"$target\","
		request="$request \"title\": \"$title\", \"description\": \"$description\","
		request="$request"'"squash": false, "remove_source_branch": true}'

		# escape newlines in commit message, see https://superuser.com/questions/955935/how-can-i-replace-a-newline-with-its-escape-sequence
		request=${request//$'\n'/\\n}
		echo "$request" | jq || return $?

		read -p "OK? " -n1 

		# jq in curl sanitizes the data in case there are invisible chars messing up the request
		case "$REPLY" in
			""|[Yy]) response=$(curl "$url" -H 'Content-Type: application/json' -H "PRIVATE-TOKEN: $GITLAB_TOKEN" -d "$request") || echo error
				 mr_url=$(echo "$response"|jq -r '.web_url')
				 echo "$response"|jq
				 printf '%s\n' "$mr_url" "$mr_url/edit"
				 #sensible-browser "$mr_url"
				 flatpak run com.brave.Browser "$mr_url"
					 ;;
			*) printf "\n\nabort\n" ;;
		esac
		
		break
	done
	unset PROJECT_ID
}

gds() {
  echo "Delete Stale…"
  stale_branches=$(git branch | grep -v main | sed 's/^*//')
  [ -n "$stale_branches" ] && {
	  git branch -d  $stale_branches || {
		read -p 'Delete anyway? (y/n)' -n1 && echo
		case $REPLY in 
			[yY]) git branch -D $(git branch | grep -v main) 
				;;
			*) echo abort…
				;;
		esac
	  }
  }
}


alias p='python3'
alias tmp='pushd $(mktemp -d)'
alias tfmt='tofu fmt -recursive'

# vi: set ai ft=sh:
